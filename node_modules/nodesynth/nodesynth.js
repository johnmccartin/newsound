// Generated by CoffeeScript 1.10.0
(function() {
  var Readable, Speaker, _, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('underscore-node');

  Readable = require('stream').Readable;

  Speaker = require('speaker');

  util = require('util');

  Number.prototype.valueAt = function(time) {
    return this;
  };

  Function.prototype.valueAt = function(time) {
    return this(time);
  };

  exports.Oscillator = require('./oscillator');

  exports.Synth = (function(superClass) {
    extend(_Class, superClass);

    function _Class(opts) {
      this.stop = bind(this.stop, this);
      this.play = bind(this.play, this);
      var options;
      _Class.__super__.constructor.call(this, {});
      options = {
        sampleRate: 44100,
        bitDepth: 16,
        channels: 1,
        bufferSize: 512
      };
      this.options = _.extend(options, opts);
      this.sampleRate = this.options.sampleRate;
      this.timeStep = 1.0 / this.sampleRate;
      this.channels = this.options.channels;
      this.bitDepth = this.options.bitDepth;
      this.source = null;
      this.time = 0;
      this.buffer = new Buffer(this.options.bufferSize);
      this.multiplier = Math.floor((1 << this.bitDepth) / 2) - 1;
      this.speaker = new Speaker({
        channels: this.channels,
        bitDepth: this.bitDepth,
        sampleRate: this.sampleRate,
        signed: true,
        float: false,
        samplesPerFrame: 10
      });
      this;
    }

    _Class.prototype.play = function() {
      this.pipe(this.speaker);
      return this;
    };

    _Class.prototype.stop = function() {
      this.unpipe(this.speaker);
      return this;
    };

    _Class.prototype._read = function(size) {
      var converted, i, j, k, ref, ref1, ref2, ri, val;
      global.SampleRate = this.sampleRate;
      if (this.source === null || !_.isFunction(this.source.valueAt)) {
        this.buffer.fill(0);
      } else {
        for (i = j = 0, ref = this.buffer.length, ref1 = this.bitDepth / 8; ref1 > 0 ? j < ref : j > ref; i = j += ref1) {
          val = this.source.valueAt(this.time);
          converted = val * this.multiplier;
          for (ri = k = 0, ref2 = this.bitDepth / 8; 0 <= ref2 ? k < ref2 : k > ref2; ri = 0 <= ref2 ? ++k : --k) {
            this.buffer[i + ri] = (converted >> (ri * 8)) & 0xff;
          }
          this.time += this.timeStep;
        }
      }
      this.push(this.buffer);
      return true;
    };

    return _Class;

  })(Readable);

}).call(this);

//# sourceMappingURL=nodesynth.js.map
